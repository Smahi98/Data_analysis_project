pairs(data)
pairs(data[1:8])
pairs(data[8:17])
pairs(data[1:2])
#Installation du package readxl
install.packages("readxl")
install.packages("readxl")
#chargement du package readxl
library(readxl)
#lecture du fichier excel
data=read_excel("dataset.xlsx",sheet="Feuil1",col_names = TRUE)
#suppression de la date
data=data[,-1]
# y  représente la variable expliquée "Close_forcast"
y=data[,18]
# Détermination de la variable entrante
coefficient=0
j=1
for (i in 1:17) {
x=data[i:i]
if ( cor(x,y, method="pearson") > coefficient){
coefficient=cor(x,y, method="pearson")
j=i
}
}
variable_entrante_1=data[j:j]
# donc c'est la variable Close_t  qui a la plus grande corrélation avec y
# On va supprimer la variable entrante du tableau initiale et l'ajouter dans un nouveau tableau
nouveau_tableau=data[18:18]
data=data[,-j]
# donc c'est la variable Close_t  qui a la plus grande corrélation avec y
# On va supprimer la variable entrante du tableau initiale et l'ajouter dans un nouveau tableau qui contient la variable expliquée (d'indice 18)
nouveau_tableau=data[18:18]
View(nouveau_tableau)
nouveau_tableau <- cbind(nouveau_tableau, variable_entrante_1)
# Calcul du modèle de régression de y sur la variable entrante
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
summary(modele)
# résidu du modèle de régression
residu=residuals(modele)
# Cherchons maintenant la variable qui a la plus grande corrélation avec le résidu
r=0
j=1
for (i in 1:16) {
x=data[i:i]
if ( cor(x,residu, method="pearson") > r){
r=cor(x,residu, method="pearson")
j=i
}
}
# coefficient de corrélation de la variable suseptible d'entrer avec le residu
print(r)
variable_entrante_2=data[j:j]
View(variable_entrante_2)
data=data[,-j]
View(nouveau_tableau)
# Ajout de la variable SO.K dans le nouveau tableau
nouveau_tableau <- cbind(nouveau_tableau, variable_entrante_2)
#Installation du package readxl
install.packages("readxl")
install.packages("readxl")
#chargement du package readxl
library(readxl)
#lecture du fichier excel
data=read_excel("dataset.xlsx",sheet="Feuil1",col_names = TRUE)
#suppression de la date
data=data[,-1]
# y  représente la variable expliquée "Close_forcast"
y=data[,18]
# Détermination de la variable entrante
coefficient=0
j=1
for (i in 1:17) {
x=data[i:i]
if ( cor(x,y, method="pearson") > coefficient){
coefficient=cor(x,y, method="pearson")
j=i
}
}
variable_entrante_1=data[j:j]
# donc c'est la variable Close_t  qui a la plus grande corrélation avec y
# On va supprimer la variable entrante du tableau initiale et l'ajouter dans un nouveau tableau qui contient la variable expliquée (d'indice 18)
nouveau_tableau=data[18:18]
data=data[,-j]
nouveau_tableau <- cbind(nouveau_tableau, variable_entrante_1)
# Calcul du modèle de régression de y sur la variable entrante
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
summary(modele)
# résidu du modèle de régression
residu=residuals(modele)
# Cherchons maintenant la variable qui a la plus grande corrélation avec le résidu
r=0
j=1
for (i in 1:16) {
x=data[i:i]
if ( cor(x,residu, method="pearson") > r){
r=cor(x,residu, method="pearson")
j=i
}
}
# C'est la variable SO.K qui candidate pour intégrer le modèle
# Son coefficient de corrélation avec le résidu est
print(r)
# D'après la table de la loi de student t(n-2,0,975)=1.96 avec n=200 et alpha=0.05
# if suffit de comparer abs(r)/sqrt((1-r^2)/198) avec t(n-2,0.975)
print(abs(r)/sqrt((1-r^2)/198))
# On voit bien que abs(r)/sqrt((1-r^2)/198) < t(n-2,0.975)
View(modele)
View(modele)
View(coefficient)
# On voit bien que abs(r)/sqrt((1-r^2)/198) < t(n-2,0.975)
# Donc l'hypothèse de nullité de r est acceptée.
# Le critère d'arrêt est donc vérifié , l'algorithme se termine
remove(variable_entrante_2)
# Question 2
# Recalculons notre modèle
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
# Calcul de l'AIC
AIC(modele)
summary(modele)
step(modele)
#Installation du package readxl
install.packages("readxl")
install.packages("readxl")
#chargement du package readxl
library(readxl)
#lecture du fichier excel
data=read_excel("dataset.xlsx",sheet="Feuil1",col_names = TRUE)
#suppression de la date
data=data[,-1]
datacopie=data[1:17]
# y  représente la variable expliquée "Close_forcast"
y=data[,18]
# Détermination de la variable entrante
coefficient=0
j=1
for (i in 1:17) {
x=data[i:i]
if ( cor(x,y, method="pearson") > coefficient){
coefficient=cor(x,y, method="pearson")
j=i
}
}
variable_entrante_1=data[j:j]
# donc c'est la variable Close_t  qui a la plus grande corrélation avec y
# On va supprimer la variable entrante du tableau initiale et l'ajouter dans un nouveau tableau qui contient la variable expliquée (d'indice 18)
nouveau_tableau=data[18:18]
data=data[,-j]
nouveau_tableau <- cbind(nouveau_tableau, variable_entrante_1)
# Calcul du modèle de régression de y sur la variable entrante
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
summary(modele)
# résidu du modèle de régression
residu=residuals(modele)
# Cherchons maintenant la variable qui a la plus grande corrélation avec le résidu
r=0
j=1
for (i in 1:16) {
x=data[i:i]
if ( cor(x,residu, method="pearson") > r){
r=cor(x,residu, method="pearson")
j=i
}
}
# C'est la variable SO.K qui candidate pour intégrer le modèle
# Son coefficient de corrélation avec le résidu est
print(r)
# D'après la table de la loi de student t(n-2,0,975)=1.96 avec n=200 et alpha=0.05
# if suffit de comparer abs(r)/sqrt((1-r^2)/198) avec t(n-2,0.975)
print(abs(r)/sqrt((1-r^2)/198))
# Recalculons notre modèle
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
# Calcul de l'AIC
AIC(modele)
summary(modele)
step(modele)
modeleglobal <- lm(Close_forcast~,,data=datacopie)
modeleglobal <- lm(Close_forcast~.,data=datacopie)
View(datacopie)
#Installation du package readxl
install.packages("readxl")
install.packages("readxl")
#chargement du package readxl
library(readxl)
#lecture du fichier excel
data=read_excel("dataset.xlsx",sheet="Feuil1",col_names = TRUE)
#suppression de la date
data=data[,-1]
datacopie=data[1:17]
datacopie=data[1:18]
# y  représente la variable expliquée "Close_forcast"
y=data[,18]
# Détermination de la variable entrante
coefficient=0
j=1
for (i in 1:17) {
x=data[i:i]
if ( cor(x,y, method="pearson") > coefficient){
coefficient=cor(x,y, method="pearson")
j=i
}
}
variable_entrante_1=data[j:j]
# donc c'est la variable Close_t  qui a la plus grande corrélation avec y
# On va supprimer la variable entrante du tableau initiale et l'ajouter dans un nouveau tableau qui contient la variable expliquée (d'indice 18)
nouveau_tableau=data[18:18]
data=data[,-j]
nouveau_tableau <- cbind(nouveau_tableau, variable_entrante_1)
# Calcul du modèle de régression de y sur la variable entrante
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
summary(modele)
# résidu du modèle de régression
residu=residuals(modele)
# Cherchons maintenant la variable qui a la plus grande corrélation avec le résidu
r=0
j=1
for (i in 1:16) {
x=data[i:i]
if ( cor(x,residu, method="pearson") > r){
r=cor(x,residu, method="pearson")
j=i
}
}
# C'est la variable SO.K qui candidate pour intégrer le modèle
# Son coefficient de corrélation avec le résidu est
print(r)
# D'après la table de la loi de student t(n-2,0,975)=1.96 avec n=200 et alpha=0.05
# if suffit de comparer abs(r)/sqrt((1-r^2)/198) avec t(n-2,0.975)
print(abs(r)/sqrt((1-r^2)/198))
# Recalculons notre modèle
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
# Calcul de l'AIC
AIC(modele)
summary(modele)
step(modele)
View(datacopie)
View(datacopie)
modeleglobal <- lm(Close_forcast~Open+High+Low+Close_t+Volume+Upper_band+Lower_band+S_Close_t_minus_one+MA5+MA10+EMA10+EMA20+MACD+ATR+RSI+SO.K+QQQ_Close,data=datacopie)
modeleglobal <- lm(Close_forcast~Open+High+Low+Close_t+Volume+Upper_Band+Lower_Band+S_Close_t_minus_one+MA5+MA10+EMA10+EMA20+MACD+ATR+RSI+SO.K+QQQ_Close,data=datacopie)
summary(modeleglobal)
step(modeleglobal)
model1=lm(Close_forcast ~ Close_t + Volume + Upper_Band + S_Close_t_minus_one + MA5 + MA10 + EMA10 + MACD + RSI, data = datacopie)
summary(model1)
#Installation du package readxl
install.packages("readxl")
install.packages("readxl")
#chargement du package readxl
library(readxl)
#lecture du fichier excel
data=read_excel("dataset.xlsx",sheet="Feuil1",col_names = TRUE)
#suppression de la date
data=data[,-1]
datacopie=data[1:18]
# y  représente la variable expliquée "Close_forcast"
y=data[,18]
# Détermination de la variable entrante
coefficient=0
j=1
for (i in 1:17) {
x=data[i:i]
if ( cor(x,y, method="pearson") > coefficient){
coefficient=cor(x,y, method="pearson")
j=i
}
}
variable_entrante_1=data[j:j]
# donc c'est la variable Close_t  qui a la plus grande corrélation avec y
# On va supprimer la variable entrante du tableau initiale et l'ajouter dans un nouveau tableau qui contient la variable expliquée (d'indice 18)
nouveau_tableau=data[18:18]
data=data[,-j]
nouveau_tableau <- cbind(nouveau_tableau, variable_entrante_1)
# Calcul du modèle de régression de y sur la variable entrante
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
summary(modele)
# résidu du modèle de régression
residu=residuals(modele)
# Cherchons maintenant la variable qui a la plus grande corrélation avec le résidu
r=0
j=1
for (i in 1:16) {
x=data[i:i]
if ( cor(x,residu, method="pearson") > r){
r=cor(x,residu, method="pearson")
j=i
}
}
# C'est la variable SO.K qui est candidate pour intégrer le modèle
# Son coefficient de corrélation avec le résidu est
print(r)
# D'après la table de la loi de student t(n-2,0,975)=1.96 avec n=200 et alpha=0.05
# if suffit de comparer abs(r)/sqrt((1-r^2)/198) avec t(n-2,0.975)
print(abs(r)/sqrt((1-r^2)/198))
# Question 2
# Recalculons notre modèle
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
summary(modele)
modeleglobal <- lm(Close_forcast~Open+High+Low+Close_t+Volume+Upper_Band+Lower_Band+S_Close_t_minus_one+MA5+MA10+EMA10+EMA20+MACD+ATR+RSI+SO.K+QQQ_Close,data=datacopie)
summary(modeleglobal)
# Procédure fournie par R qui donne l'ensemble des variables explicatives optimale
step(modeleglobal)
model1=lm(Close_forcast ~ Close_t + Volume + Upper_Band + S_Close_t_minus_one + MA5 + MA10 + EMA10 + MACD + RSI, data = datacopie)
summary(model1)
# Calcul de l'AIC
AIC(modele)
remove(datacopie)
remove(modeleglobal)
remove(model1)
# Test d'homoscédasticité
plot(predict(modele),resid(modele))
# Test d'homoscédasticité
par(mar = rep(2, 4))
plot(predict(modele),resid(modele))
# Test d'homoscédasticité
plot(predict(modele),resid(modele))
# Test d'homoscédasticité
plot(predict(modele),resid(modele))
# Test d'homoscédasticité
plot(predict(modele),resid(modele))
# test de normalité
shapiro.test(resid(modele))
ks.test(resid(modele),pnorm)
summary(modele)
# test de normalité
shapiro.test(resid(modele))
ks.test(resid(modele),pnorm)
#Installation du package readxl
install.packages("readxl")
install.packages("readxl")
#chargement du package readxl
library(readxl)
#lecture du fichier excel
data=read_excel("dataset.xlsx",sheet="Feuil1",col_names = TRUE)
#suppression de la date
data=data[,-1]
# y  représente la variable expliquée "Close_forcast"
y=data[,18]
# Détermination de la variable entrante
coefficient=0
j=1
for (i in 1:17) {
x=data[i:i]
if ( cor(x,y, method="pearson") > coefficient){
coefficient=cor(x,y, method="pearson")
j=i
}
}
variable_entrante_1=data[j:j]
# donc c'est la variable Close_t  qui a la plus grande corrélation avec y
# On va supprimer la variable entrante du tableau initiale et l'ajouter dans un nouveau tableau qui contient la variable expliquée (d'indice 18)
nouveau_tableau=data[18:18]
data=data[,-j]
nouveau_tableau <- cbind(nouveau_tableau, variable_entrante_1)
# Calcul du modèle de régression de y sur la variable entrante
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
summary(modele)
# résidu du modèle de régression
residu=residuals(modele)
# Cherchons maintenant la variable qui a la plus grande corrélation avec le résidu
r=0
j=1
for (i in 1:16) {
x=data[i:i]
if ( cor(x,residu, method="pearson") > r){
r=cor(x,residu, method="pearson")
j=i
}
}
# C'est la variable SO.K qui est candidate pour intégrer le modèle
# Son coefficient de corrélation avec le résidu est
print(r)
# D'après la table de la loi de student t(n-2,0,975)=1.96 avec n=200 et alpha=0.05
# if suffit de comparer abs(r)/sqrt((1-r^2)/198) avec t(n-2,0.975)
print(abs(r)/sqrt((1-r^2)/198))
# Calcul du R carré et R carré ajusté
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
summary(modele)
# Test d'homoscédasticité
plot(predict(modele),resid(modele))
# test de normalité
shapiro.test(resid(modele))
ks.test(resid(modele),pnorm)
# Valeurs aberrantes
A=sqrt(deviance(modele)/df.residual(model))
# Valeurs aberrantes
A=sqrt(deviance(modele)/df.residual(modele))
aberant=abs(predict(modele))/A
plot(aberant)
library(outliers)
# Calcul de l'AIC
AIC(modele)
#Installation du package readxl
install.packages("readxl")
#chargement du package readxl
library(readxl)
#lecture du fichier excel
data=read_excel("dataset.xlsx",sheet="Feuil1",col_names = TRUE)
#suppression de la date
data=data[,-1]
# y  représente la variable expliquée "Close_forcast"
y=data[,18]
# Détermination de la variable entrante
coefficient=0
j=1
for (i in 1:17) {
x=data[i:i]
if ( cor(x,y, method="pearson") > coefficient){
coefficient=cor(x,y, method="pearson")
j=i
}
}
variable_entrante_1=data[j:j]
# donc c'est la variable Close_t  qui a la plus grande corrélation avec y
# On va supprimer la variable entrante du tableau initiale et l'ajouter dans un nouveau tableau qui contient la variable expliquée (d'indice 18)
nouveau_tableau=data[18:18]
data=data[,-j]
nouveau_tableau <- cbind(nouveau_tableau, variable_entrante_1)
# Calcul du modèle de régression de y sur la variable entrante
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
summary(modele)
# résidu du modèle de régression
residu=residuals(modele)
# Cherchons maintenant la variable qui a la plus grande corrélation avec le résidu
r=0
j=1
for (i in 1:16) {
x=data[i:i]
if ( cor(x,residu, method="pearson") > r){
r=cor(x,residu, method="pearson")
j=i
}
}
# C'est la variable SO.K qui est candidate pour intégrer le modèle
# Son coefficient de corrélation avec le résidu est
print(r)
# D'après la table de la loi de student t(n-2,0,975)=1.96 avec n=200 et alpha=0.05
# if suffit de comparer abs(r)/sqrt((1-r^2)/198) avec t(n-2,0.975)
print(abs(r)/sqrt((1-r^2)/198))
# Calcul du R carré et R carré ajusté
modele <- lm(Close_forcast~Close_t,data=nouveau_tableau)
summary(modele)
# Test d'homoscédasticité
plot(predict(modele),resid(modele))
# test de normalité
shapiro.test(resid(modele))
ks.test(resid(modele),pnorm)
# Valeurs aberrantes
A=sqrt(deviance(modele)/df.residual(modele))
aberant=abs(predict(modele))/A
plot(aberant)
# Calcul de l'AIC
AIC(modele)
library(FactoMineR)
library(ggplot2)
library(factoextra)
library("readxl")
#importer le dataset
qualita <- read_excel("qualita.xlsx")
library(FactoMineR)
library(ggplot2)
library(factoextra)
library("readxl")
#importer le dataset
qualita <- read_excel("qualita.xlsx")
qualita$Open<-as.factor(qualita$Open)
qualita$High<-as.factor(qualita$High)
qualita$Low<-as.factor(qualita$Low)
qualita$Close_t<-as.factor(qualita$Close_t)
qualita$Volume<-as.factor(qualita$Volume)
qualita$Lower_Band<-as.factor(qualita$Lower_Band)
qualita$MAM<-as.factor(qualita$MAM)
qualita$MAMK<-as.factor(qualita$MAMK)
qualita$EMA10<-as.factor(qualita$EMA10)
qualita$EMA20<-as.factor(qualita$EMA20)
qualita$MACD<-as.factor(qualita$MACD)
qualita$ATR<-as.factor(qualita$ATR)
qualita$RSI<-as.factor(qualita$RSI)
qualita$SO.K<-as.factor(qualita$SO.K)
qualita$QQQ_Close<-as.factor(qualita$QQQ_Close)
res<-tab.disjonctif(qualita)
#caclul du frequence de chaque modalit�
nrow(res)
apply(res,2,sum)
fr<-apply(res,2,sum)/nrow(res)
#Applcation de ACM
facto<-MCA(qualita, ncp = 5,graph = FALSE )
facto
#nombre de qualitaiables
s <- ncol(qualita)
s
#nombre d'observation
n <- nrow(qualita)
n
#nombre de modalites
p <- sum(unlist(lapply(qualita,function(x){length(levels(x))})))
p
#calcul les valeurs propres
facto$eig
plot(1:15,facto$eig[,1],type="b",ylab="Valeurs propres",xlab="Composantes",main="graphique des valeurs propres")
#calcul du cosinus carree de chaque modalite
facto$var$cos2
#calcul de la moyenne pour detereminer les modalires les biens presentes
mean(facto$eig[,1])
#contribution de chaque modalite
contrib <- facto$var$contrib
contrib
fviz_contrib(facto, choice = "var", axes = 1, top = 30)
fviz_contrib(facto, choice = "var", axes = 2, top = 30)
fviz_contrib(facto, choice = "var", axes = 3, top = 30)
fviz_contrib(facto, choice = "var", axes = 4, top = 30)
fviz_contrib(facto, choice = "var", axes = 5, top = 30)
#CAH de la contibutions des modalit�s
cont<-HCPC(contrib)
